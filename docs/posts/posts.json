[
  {
    "path": "posts/2022-08-16-crear-una-pgina-con-distill/",
    "title": "Cómo hacer una página estática con distill",
    "description": "En este post veremos cómo crear(nos) una página\nestática utilizando el paquete distill.",
    "author": [
      {
        "name": "Soledad Araya",
        "url": "https://snaraya.github.io"
      }
    ],
    "date": "2022-08-16",
    "categories": [],
    "contents": "\ndistill\nLo primero que realizaremos esta vez es instalar el paquete que usaremos:\n\n\ninstall.packages(\"distill\")\n\n\nA diferencia de la mayoría de los paquetes, no lo cargaremos al ambiente de R, sólo usaremos algunas funciones.\nCon el paquete cargado, haremos un proyecto:\n\nIremos a “New Directory”:\n\nY haremos clic en “Distill Blog”. Nos pedirá poner un nombre a la carpeta, donde estará alojado y el título del blog.\n\nEl blog se creará de manera automática. Esto es lo que verán al momento de crearlo:\n\n¿Qué es cada documento?\n\n\nlibrary(knitr)\nlibrary(kableExtra)\n\nreadxl::read_excel(\"input/tablas.xlsx\", sheet = \"tablas_distill\") %>% \n  knitr::kable() %>% \n  kable_styling(bootstrap_options = c(\"striped\")) %>% \n  column_spec(1, width_min = \"3cm\", bold = T) %>% \n  column_spec(2, width_min = \"6cm\") \n\n\nDocumento\n\n\nDescripción\n\n\n_site.yml\n\n\nArchivo usado para la configuración del sitio web.\n\n\nindex.Rmd\n\n\nPágina de inicio del blog.\n\n\nabout.Rmd\n\n\nPágina que contiene la información acerca del autor o institución.\n\n\n_posts/welcome/welcome.Rmd\n\n\nPost de bienvenida al blog.\n\n\nPersonalizar el blog:\nHay muchas formas de personalizar el blog. Para empezar, podemos crear un tema:\n\n\ndistill::create_theme(\"theme\")\n\n\nEsto creará un archivo CSS en la carpeta. Pueden modificar a su gusto cómo lucirá su página. Cuando esté listo, sólo deben agregar theme: theme.css a su archivo _site.ylm:\n\nname: \"snaraya\"\ntitle: \"Blank Space\"\ntheme: theme.css\nnavbar:\n\nSi buscan personalizar su página, les dejo algunos links de interés:\nCrear un tema en distill.\nR Markdown Cookbook.\nPaquete pasa usar emojis en R Markdown.\nSi buscan personalizar la paleta de colores de su página y de los gráficos, les recomiendo esta página.\nPublicar nuestro blog:\nUsaremos GitHub Pages para lanzar nuestro blog. Hay distintas maneras de poner un blog hecho con R Markdown online, pero nosotros/as usaremos esta versión para ocupar la cuenta que hicimos la semana pasada.\nHay diferentes formas de llegar al mismo destino, probablemente esa es una de las fortalezas de R, pero cuando recién se está aprendiendo esto puede resultar abrumador. En mi caso, yo ya tenía creado un repositorio con el nombre de mi usuario (https://github.com/snaraya/snaraya). Para usar GitHub Pages es necesario que el nombre de la página sea el mismo que el nombre de usuario, esto quiere decir que tendremos que crear una repo con el mismo nombre de usuario.\nTenemos la repo en nuestra cuenta.\nPodemos abrir la repo con GitHub Desktop, esto nos creará automáticamente una carpeta local que tendrá un README.md. Podemos mover los archivos de nuestro proyecto directamente a esa carpeta.\n\nRecuerden que el archivo README.md puede ser utilizado para crear una tarjeta de bienvenida a su página de GitHub. En ella pueden resumir algunos de sus trabajos como ayudantes, asistentes de investigación, prácticas o pasantías. También, pueden poner el nivel de sus habilidades con R u otros lenguajes de programación, el nivel de inglés o de otros idiomas, su manejo de programas como QGIS, SPSS y Stata.\n\nIremos a Build que se encuentra en el panel superior derecho.\n\nEste paso nos dará una mirada global de la página que estamos creando. Si hay algún problema, lo más probable es que se pueda identificar en este momento. De esa manera, se puede eliminar el error antes de lanzar la página a la web.\nSi queremos hacerlo desde la consola, podemos poner:\n\n\nrmarkdown::render_site()\n\n\nCuando corran la página, ésta se abrirá en el Viewer\n\nDecidí dejar una pestaña para hacer un CV. Ustedes pueden crear tantas secciones como lo crean necesario para el desarrollo de sus proyectos.\n\nArchivo jekill\nGitHub Pages ocupa su propia interfaz al momento de lanzar una página web, por lo que debemos decirle a GitHub que no ocuparemos esa interfaz predeterminada, sino la que estamos desarrollando. Para eso, crearemos un archivo dentro de nuestra repo.\n\n\nfile.create(\".nojekyll\")\n\n\nEsto bastará para que nuestro sitio pueda lanzarse de manera exitosa.\nLanzamiento\nVan a GitHub Desktop y hacen el primer commit desde la carpeta local. Esto subirá los archivos en los que han estado trabajando a GitHub, y dentro de unos minutos podrán ver su página lista.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-08-17T00:17:10-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-08-17-primeros-pasos/",
    "title": "Primeros pasos con tidyverse y ggplot2",
    "description": "¿Cómo avanzar en el uso de R?",
    "author": [
      {
        "name": "Soledad Araya",
        "url": "https://snaraya.github.io"
      }
    ],
    "date": "2022-08-16",
    "categories": [],
    "contents": "\nR Markdown\nEn el primer taller, lo que hicimos fue abrir un script y trabajar en él. Para escribir un comentario o título en un script, se debe anteponer un # en la línea de código. Trabajar en un script es fácil, pero el trabajo en ellos puede ser confuso para alguien quien no está acostumbrado al lenguaje utilizado en R. Entonces, si queremos que nuestros trabajos sean reproducibles y accesibles, tenemos que pensar en otra forma de mostrar nuestra “área de trabajo”. Por otro lado, R Markdown es utilizado también en el desarrollo de blogs o páginas estáticas en GitHub. Por ese motivo, en este curso de ahora en adelante utilizaremos este formato para avanzar en nuestro trabajo.\nEntonces, podemos utilizar R Markdown para:\nGuardar y ejecutar nuestras líneas de código.\nGenerar informes de alta calidad que pueden ser compartidos con más personas.\nR Markdown genera distintos tipos de documentos (html, pdf, Words, dashboards, latex, etc.).\nNo sólo funciona con el lenguaje R, sino también con otros formatos de códigos como Python.\nSi tenemos instalada la librería rmarkdown, crearemos un archivo que nos servirá para avanzar en el taller de hoy:\n\nEmpezaremos cargando la librería tidyverse:\n\n\nlibrary(tidyverse)\n\n\nOpciones que se pueden utilizar en los chunks:\n\n\n# Si queremos comentar un chunk, debemos tratarlo como un script y anteponer un gato\n\n# Aunque el desarrollo o presentación de tablas aun no está en nuestro itinerario del curso, sí podemos empezar a instalar algunas de las librerías que nos servirán más adelante:\n\nlibrary(knitr)\nlibrary(kableExtra)\n\nreadxl::read_excel(\"input/tablas.xlsx\") %>% \n  kable() %>% \n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\"))\n\n\nOpciones\n\n\nDescripción\n\n\ninclude = FALSE\n\n\nNi el código ni los resultados aparecerán en el archivo final.\n\n\necho = FALSE\n\n\nEl código no aparecerá en el resultado final, pero sí sus resultados.\n\n\nmessage = FALSE\n\n\nSi el código genera algún mensaje, éste no aparecerá en el archivo final.\n\n\nwarning = FALSE\n\n\nSi el código genera algún warning, éste no aparecerá en el archivo final.\n\n\nfig.cap = “…”\n\n\nAñade un título a los gráficos.\n\n\ntidyverse & ggplot2\nggplot2 es una librería dentro del tidyvere que nos permitirá hacer gráficos personalizables. Está basada en The Grammar of Graphics que propone un trabajo gramatical que puede ser usado para describir y construir una variedad amplia de gráficos estadísticos (para más información: ver A Layered Grammar of Graphics de Hadley Wickham (2010) y The Grammar of Graphics de Wilkinson, Anand y Grossman (2005)). Para que nos hagamos una idea: hacer gráficos requiere de que nosotros/as podamos ir separando cada pieza que lo compone: desde los tipos de variables que estamos utilizando hasta el tipo de letra que debe tener nuestro título. De esa manera, ggplot2 se combierte en una herramienta valiosa para la presentación de resultados.\nLas herramientas del tidyverse como lo son filter(), mutate(), summarise() y arrange() son útiles para transformar los datos que necesitaremos graficar. En algunos casos, esta será mínima, en otras tendremos que trabajar para llegar a una base de datos lista para graficar. Algo muy importante es saber diferenciar las bases de datos que son “anchas” de las que son “largas”, porque dependiendo de su caracterización es cómo tendremos que jugar con ellas. Para ese tipo de transformaciones utilizamos pivot_longer() y pivot_wider().\nCargaremos algunas bases de datos que están en la carpeta data:\n\n\ndf_militantes <- readxl::read_excel(\"data/Estadistica por rango etario año 2016.xlsx\")\n\nnames(df_militantes)\n\n [1] \"ESTADISTICA POR RANGO ETARIO AL 31/12/2016\"\n [2] \"...2\"                                      \n [3] \"...3\"                                      \n [4] \"...4\"                                      \n [5] \"...5\"                                      \n [6] \"...6\"                                      \n [7] \"...7\"                                      \n [8] \"...8\"                                      \n [9] \"...9\"                                      \n[10] \"...10\"                                     \n[11] \"...11\"                                     \n[12] \"...12\"                                     \n[13] \"...13\"                                     \n[14] \"...14\"                                     \n[15] \"...15\"                                     \n[16] \"...16\"                                     \n[17] \"...17\"                                     \n[18] \"...18\"                                     \n[19] \"...19\"                                     \n\n# Si ven la base de datos normal, verán que la primera fila no contiene los nombres de las variables. Por lo tanto, tenemos que cargarla especificando esto:\n\ndf_militantes <- readxl::read_excel(\"data/Estadistica por rango etario año 2016.xlsx\", skip = 1)\n\nnames(df_militantes)\n\n [1] \"PARTIDO\" \"REGION\"  \"COMUNA\"  \"SEXO\"    \"18-19\"   \"20-24\"  \n [7] \"25-29\"   \"30-34\"   \"35-39\"   \"40-44\"   \"45-49\"   \"50-54\"  \n[13] \"55-59\"   \"60-64\"   \"65-69\"   \"70-74\"   \"75-79\"   \"80+\"    \n[19] \"TOTAL\"  \n\n# Si contiene los nombres de las columnas. En R existe el paquete janitor que nos ayuda a limpiar los nombres de las columnas. Los nombres con caracteres especiales siempre dan problemas.\n\ndf_militantes <- df_militantes %>% \n  janitor::clean_names()\n\nnames(df_militantes)\n\n [1] \"partido\" \"region\"  \"comuna\"  \"sexo\"    \"x18_19\"  \"x20_24\" \n [7] \"x25_29\"  \"x30_34\"  \"x35_39\"  \"x40_44\"  \"x45_49\"  \"x50_54\" \n[13] \"x55_59\"  \"x60_64\"  \"x65_69\"  \"x70_74\"  \"x75_79\"  \"x80\"    \n[19] \"total\"  \n\n# Ahora será más fácil escribir las variables.\n\n\nAhora, tenemos una base que podemos utilizar más fácilmente para codificar.\nExploración de la base de datos\nUno de los primeros pasos siempre es explorar la base de datos. Para eso, tenemos distintas funciones. La función más básica es head() y tail()que nos permite ver la información de los primeros y últimas 10 filas de la base de datos. Después, tenemos str() que nos muestra el formato de las variables.\nPero ¿de qué hablamos cuando hablamos de los formatos de las variables?\nConocer en qué formato están nuestras variables nos hace la vida más fácil, porque nos permite utilizar funciones de acuerdo a su formato, especialmente cuando utilizamos el tidyverse.\n\n\nreadxl::read_excel(\"input/tablas.xlsx\", sheet = \"tabla_formatos\") %>% \n  knitr::kable() %>% \n  kable_styling(bootstrap_options = c(\"striped\")) %>% \n  column_spec(1, width_min = \"3cm\", bold = T) %>% \n  column_spec(2, width_min = \"6cm\") %>% \n  column_spec(3, width_min = \"3cm\")  \n\n\nTipo\n\n\nDescripción\n\n\nEjemplo\n\n\nLogical\n\n\nVariable binaria\n\n\nTRUE, FALSE\n\n\nNumeric\n\n\nVariable numérica que puede ser escriba con fracciones.\n\n\n5, 4, 100, 98.67\n\n\nInteger\n\n\nVariable numérica que no puede ser escrito en fracción. En otras palabras, números enteros.\n\n\n2L, 46L, 0L\n\n\nComplex\n\n\nVariable que contiene números imaginarios.\n\n\n3 + 2i\n\n\nCharacter or String\n\n\nVariable que contiene información en palabras escritas\n\n\n“Soledad Araya”, “Análisis de datos”, “Programar en R”\n\n\nFactors\n\n\nVariable usada para categorizar cuando tenemos un rango limitado de diferentes valores\n\n\nScala de Likert: “Muy satisfecho”,“Satisfecho”,“Neutro”,“Insatisfecho”,“Satisfecho”\n\n\nDouble\n\n\nVariable guardada en formado decimal\n\n\nSi cargamos una variable con números enteros “6”, se guardará como “6.00”\n\n\nLa función más básica para revisar las columnas es str()\n\n\nstr(df_militantes)\n\ntibble [10,930 × 19] (S3: tbl_df/tbl/data.frame)\n $ partido: chr [1:10930] \"RENOVACION NACIONAL\" \"RENOVACION NACIONAL\" \"RENOVACION NACIONAL\" \"RENOVACION NACIONAL\" ...\n $ region : chr [1:10930] \"DE TARAPACA\" \"DE TARAPACA\" \"DE TARAPACA\" \"DE TARAPACA\" ...\n $ comuna : chr [1:10930] \"ALTO HOSPICIO\" \"ALTO HOSPICIO\" \"CAMIÑA\" \"CAMIÑA\" ...\n $ sexo   : chr [1:10930] \"M\" \"V\" \"V\" \"M\" ...\n $ x18_19 : num [1:10930] 0 0 0 0 0 0 0 0 0 0 ...\n $ x20_24 : num [1:10930] 0 0 0 0 0 0 0 1 0 0 ...\n $ x25_29 : num [1:10930] 1 1 0 1 0 0 1 2 10 6 ...\n $ x30_34 : num [1:10930] 0 2 0 0 0 0 4 4 24 19 ...\n $ x35_39 : num [1:10930] 1 1 1 2 1 1 2 1 25 20 ...\n $ x40_44 : num [1:10930] 6 5 3 3 1 0 3 2 35 29 ...\n $ x45_49 : num [1:10930] 13 14 4 2 4 1 2 4 70 55 ...\n $ x50_54 : num [1:10930] 25 14 3 3 5 0 2 9 70 68 ...\n $ x55_59 : num [1:10930] 20 16 7 1 2 2 4 3 58 63 ...\n $ x60_64 : num [1:10930] 25 12 5 1 0 4 1 2 65 68 ...\n $ x65_69 : num [1:10930] 18 8 2 2 1 0 1 1 50 62 ...\n $ x70_74 : num [1:10930] 15 7 1 0 0 1 3 0 40 38 ...\n $ x75_79 : num [1:10930] 4 2 3 7 0 0 0 3 27 33 ...\n $ x80    : num [1:10930] 4 4 5 2 0 1 3 1 28 36 ...\n $ total  : num [1:10930] 132 86 34 24 14 10 26 33 502 497 ...\n\nPero no es la única función:\n\n\n#Es la misma información, pero más ordenada:\n\nglimpse(df_militantes)\n\nRows: 10,930\nColumns: 19\n$ partido <chr> \"RENOVACION NACIONAL\", \"RENOVACION NACIONAL\", \"RENOV…\n$ region  <chr> \"DE TARAPACA\", \"DE TARAPACA\", \"DE TARAPACA\", \"DE TAR…\n$ comuna  <chr> \"ALTO HOSPICIO\", \"ALTO HOSPICIO\", \"CAMIÑA\", \"CAMIÑA\"…\n$ sexo    <chr> \"M\", \"V\", \"V\", \"M\", \"V\", \"M\", \"V\", \"M\", \"V\", \"M\", \"M…\n$ x18_19  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 1…\n$ x20_24  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 10, 11, 3,…\n$ x25_29  <dbl> 1, 1, 0, 1, 0, 0, 1, 2, 10, 6, 0, 0, 0, 1, 18, 14, 5…\n$ x30_34  <dbl> 0, 2, 0, 0, 0, 0, 4, 4, 24, 19, 1, 0, 1, 2, 13, 27, …\n$ x35_39  <dbl> 1, 1, 1, 2, 1, 1, 2, 1, 25, 20, 5, 0, 3, 0, 15, 21, …\n$ x40_44  <dbl> 6, 5, 3, 3, 1, 0, 3, 2, 35, 29, 2, 3, 1, 2, 22, 25, …\n$ x45_49  <dbl> 13, 14, 4, 2, 4, 1, 2, 4, 70, 55, 3, 2, 5, 5, 51, 67…\n$ x50_54  <dbl> 25, 14, 3, 3, 5, 0, 2, 9, 70, 68, 3, 5, 3, 15, 72, 1…\n$ x55_59  <dbl> 20, 16, 7, 1, 2, 2, 4, 3, 58, 63, 8, 6, 6, 6, 75, 87…\n$ x60_64  <dbl> 25, 12, 5, 1, 0, 4, 1, 2, 65, 68, 8, 6, 8, 5, 65, 93…\n$ x65_69  <dbl> 18, 8, 2, 2, 1, 0, 1, 1, 50, 62, 1, 4, 9, 4, 64, 73,…\n$ x70_74  <dbl> 15, 7, 1, 0, 0, 1, 3, 0, 40, 38, 2, 5, 6, 2, 50, 41,…\n$ x75_79  <dbl> 4, 2, 3, 7, 0, 0, 0, 3, 27, 33, 2, 1, 0, 5, 36, 33, …\n$ x80     <dbl> 4, 4, 5, 2, 0, 1, 3, 1, 28, 36, 1, 2, 4, 4, 53, 21, …\n$ total   <dbl> 132, 86, 34, 24, 14, 10, 26, 33, 502, 497, 36, 35, 4…\n\nLuego, tenemos summary() que nos permite tener el mínimo, máximo y los cuartiles de las variables. Especialmente útil cuando tenemos variables numéricas.\n\n\nsummary(df_militantes)\n\n   partido             region             comuna         \n Length:10930       Length:10930       Length:10930      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n     sexo               x18_19             x20_24       \n Length:10930       Min.   :  0.0000   Min.   :  0.000  \n Class :character   1st Qu.:  0.0000   1st Qu.:  0.000  \n Mode  :character   Median :  0.0000   Median :  0.000  \n                    Mean   :  0.7866   Mean   :  4.316  \n                    3rd Qu.:  0.0000   3rd Qu.:  2.000  \n                    Max.   :569.0000   Max.   :658.000  \n     x25_29            x30_34            x35_39      \n Min.   :  0.000   Min.   :  0.000   Min.   :  0.00  \n 1st Qu.:  0.000   1st Qu.:  0.000   1st Qu.:  0.00  \n Median :  1.000   Median :  1.000   Median :  1.00  \n Mean   :  4.701   Mean   :  4.076   Mean   :  4.15  \n 3rd Qu.:  3.000   3rd Qu.:  3.000   3rd Qu.:  4.00  \n Max.   :344.000   Max.   :251.000   Max.   :206.00  \n     x40_44            x45_49           x50_54           x55_59      \n Min.   :  0.000   Min.   :  0.00   Min.   :  0.00   Min.   :  0.00  \n 1st Qu.:  0.000   1st Qu.:  0.00   1st Qu.:  0.00   1st Qu.:  0.00  \n Median :  1.000   Median :  2.00   Median :  2.00   Median :  2.00  \n Mean   :  5.847   Mean   : 10.92   Mean   : 12.87   Mean   : 10.74  \n 3rd Qu.:  5.000   3rd Qu.:  9.00   3rd Qu.: 10.00   3rd Qu.:  9.00  \n Max.   :290.000   Max.   :494.00   Max.   :550.00   Max.   :569.00  \n     x60_64            x65_69            x70_74       \n Min.   :  0.000   Min.   :  0.000   Min.   :  0.000  \n 1st Qu.:  0.000   1st Qu.:  0.000   1st Qu.:  0.000  \n Median :  2.000   Median :  1.000   Median :  1.000  \n Mean   :  8.524   Mean   :  6.689   Mean   :  5.245  \n 3rd Qu.:  7.000   3rd Qu.:  6.000   3rd Qu.:  4.000  \n Max.   :417.000   Max.   :281.000   Max.   :232.000  \n     x75_79             x80              total       \n Min.   :  0.000   Min.   :  0.000   Min.   :   1.0  \n 1st Qu.:  0.000   1st Qu.:  0.000   1st Qu.:   4.0  \n Median :  0.000   Median :  0.000   Median :  21.0  \n Mean   :  3.654   Mean   :  4.595   Mean   :  87.1  \n 3rd Qu.:  3.000   3rd Qu.:  3.000   3rd Qu.:  79.0  \n Max.   :136.000   Max.   :224.000   Max.   :3096.0  \n\nSi necesitamos más información, tenemos skim(), que no sólo nos entrega información sobre las variables numéricas, sino también de las variables categóricas. Esta función viene del paquete skimr.\n\n\nskimr::skim(df_militantes)\n\n\nTable 1: Data summary\n\n\n\n\n\n\nName\n\n\ndf_militantes\n\n\nNumber of rows\n\n\n10930\n\n\nNumber of columns\n\n\n19\n\n\n_______________________\n\n\n\n\nColumn type frequency:\n\n\n\n\ncharacter\n\n\n4\n\n\nnumeric\n\n\n15\n\n\n________________________\n\n\n\n\nGroup variables\n\n\nNone\n\nVariable type: character\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmin\n\n\nmax\n\n\nempty\n\n\nn_unique\n\n\nwhitespace\n\n\npartido\n\n\n0\n\n\n1\n\n\n5\n\n\n30\n\n\n0\n\n\n33\n\n\n0\n\n\nregion\n\n\n0\n\n\n1\n\n\n9\n\n\n44\n\n\n0\n\n\n15\n\n\n0\n\n\ncomuna\n\n\n0\n\n\n1\n\n\n4\n\n\n27\n\n\n0\n\n\n346\n\n\n0\n\n\nsexo\n\n\n0\n\n\n1\n\n\n1\n\n\n1\n\n\n0\n\n\n2\n\n\n0\n\nVariable type: numeric\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmean\n\n\nsd\n\n\np0\n\n\np25\n\n\np50\n\n\np75\n\n\np100\n\n\nhist\n\n\nx18_19\n\n\n0\n\n\n1\n\n\n0.79\n\n\n7.87\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\n569\n\n\n▇▁▁▁▁\n\n\nx20_24\n\n\n0\n\n\n1\n\n\n4.32\n\n\n17.80\n\n\n0\n\n\n0\n\n\n0\n\n\n2\n\n\n658\n\n\n▇▁▁▁▁\n\n\nx25_29\n\n\n0\n\n\n1\n\n\n4.70\n\n\n15.91\n\n\n0\n\n\n0\n\n\n1\n\n\n3\n\n\n344\n\n\n▇▁▁▁▁\n\n\nx30_34\n\n\n0\n\n\n1\n\n\n4.08\n\n\n11.95\n\n\n0\n\n\n0\n\n\n1\n\n\n3\n\n\n251\n\n\n▇▁▁▁▁\n\n\nx35_39\n\n\n0\n\n\n1\n\n\n4.15\n\n\n10.08\n\n\n0\n\n\n0\n\n\n1\n\n\n4\n\n\n206\n\n\n▇▁▁▁▁\n\n\nx40_44\n\n\n0\n\n\n1\n\n\n5.85\n\n\n13.53\n\n\n0\n\n\n0\n\n\n1\n\n\n5\n\n\n290\n\n\n▇▁▁▁▁\n\n\nx45_49\n\n\n0\n\n\n1\n\n\n10.92\n\n\n25.36\n\n\n0\n\n\n0\n\n\n2\n\n\n9\n\n\n494\n\n\n▇▁▁▁▁\n\n\nx50_54\n\n\n0\n\n\n1\n\n\n12.87\n\n\n31.01\n\n\n0\n\n\n0\n\n\n2\n\n\n10\n\n\n550\n\n\n▇▁▁▁▁\n\n\nx55_59\n\n\n0\n\n\n1\n\n\n10.74\n\n\n24.81\n\n\n0\n\n\n0\n\n\n2\n\n\n9\n\n\n569\n\n\n▇▁▁▁▁\n\n\nx60_64\n\n\n0\n\n\n1\n\n\n8.52\n\n\n19.55\n\n\n0\n\n\n0\n\n\n2\n\n\n7\n\n\n417\n\n\n▇▁▁▁▁\n\n\nx65_69\n\n\n0\n\n\n1\n\n\n6.69\n\n\n15.65\n\n\n0\n\n\n0\n\n\n1\n\n\n6\n\n\n281\n\n\n▇▁▁▁▁\n\n\nx70_74\n\n\n0\n\n\n1\n\n\n5.24\n\n\n12.71\n\n\n0\n\n\n0\n\n\n1\n\n\n4\n\n\n232\n\n\n▇▁▁▁▁\n\n\nx75_79\n\n\n0\n\n\n1\n\n\n3.65\n\n\n9.17\n\n\n0\n\n\n0\n\n\n0\n\n\n3\n\n\n136\n\n\n▇▁▁▁▁\n\n\nx80\n\n\n0\n\n\n1\n\n\n4.59\n\n\n12.72\n\n\n0\n\n\n0\n\n\n0\n\n\n3\n\n\n224\n\n\n▇▁▁▁▁\n\n\ntotal\n\n\n0\n\n\n1\n\n\n87.10\n\n\n182.34\n\n\n1\n\n\n4\n\n\n21\n\n\n79\n\n\n3096\n\n\n▇▁▁▁▁\n\n\nFinalmente, podemos usar una función que creará un documento-reporte html con información básica de las variables como estructura, estadísticas, missings, visualizaciones sobre la distribución. Es la función create_report() del paquete DataExplorer. Se demorará unos segundos en hacer el reporte.\nComo podemos observar ¡incluso nos entrega información de los componentes principales!\n\nAnálisis de componentes principales exploratorio: Cuando hay muchas variables, lo normal es que estén relacionadas o que midan lo mismo bajo distintos parámetros (esto es muy importante, especialmente cuando creamos preguntas o parrillas para una encuesta). Por lo tanto, se hace necesario reducir el número de variables. En este caso, cuando las variables están fuertemente correlacionadas, estas puedes ser transformadas en nuevas variables llamado conjunto de componentes principales.\n\nEn este caso, las variables no tienen mucha información y están correlacionadas porque están midiendo básicamente lo mismo: el número de militantes por edad y género. Ya que tenemos nuestra descripción de los datos, volvamos al punto inicial.\nWide vs. long data\nLa base de datos que tenemos está en formato “wide”, ¿qué quiere decir esto? Las edades, por ejemplo, están midiendo lo mismo. Para hacer un mayor análisis, necesitamos convertir nuestra base “wide” en una base “long”. Esto es conocido como transformar una base “desordenada” en una base “tidy” u ordenada. Este último tipo nos sirve especialmente cuando usamos el tidyverse\n¿Cómo hacemos esta tranformación?\n\n\n# Usamos pivot_longer()\n\ndf_militantes <- df_militantes %>% \n  pivot_longer(cols = starts_with(\"x\"), names_to = \"edad\", values_to = \"militantes\")\n\nhead(df_militantes)\n\n# A tibble: 6 × 7\n  partido             region      comuna  sexo  total edad  militantes\n  <chr>               <chr>       <chr>   <chr> <dbl> <chr>      <dbl>\n1 RENOVACION NACIONAL DE TARAPACA ALTO H… M       132 x18_…          0\n2 RENOVACION NACIONAL DE TARAPACA ALTO H… M       132 x20_…          0\n3 RENOVACION NACIONAL DE TARAPACA ALTO H… M       132 x25_…          1\n4 RENOVACION NACIONAL DE TARAPACA ALTO H… M       132 x30_…          0\n5 RENOVACION NACIONAL DE TARAPACA ALTO H… M       132 x35_…          1\n6 RENOVACION NACIONAL DE TARAPACA ALTO H… M       132 x40_…          6\n\nAhora, revisemos la base de datos con summary():\n\n\nsummary(df_militantes)\n\n   partido             region             comuna         \n Length:153020      Length:153020      Length:153020     \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n     sexo               total            edad          \n Length:153020      Min.   :   1.0   Length:153020     \n Class :character   1st Qu.:   4.0   Class :character  \n Mode  :character   Median :  21.0   Mode  :character  \n                    Mean   :  87.1                     \n                    3rd Qu.:  79.0                     \n                    Max.   :3096.0                     \n   militantes     \n Min.   :  0.000  \n 1st Qu.:  0.000  \n Median :  1.000  \n Mean   :  6.221  \n 3rd Qu.:  4.000  \n Max.   :658.000  \n\nGrammar of graphics\nYa exploramos nuestros datos y convertimos nuestra base de datos en una base tidy. Es momento de que hagamos nuestros gráficos. Para eso, debemos aprender cómo hacerlo en ggplot2. La dimensión o capa principal es denomina layer que es usada para crear los objetos en un gráfico. Se pueden usar una multiplicidad de capas que usan los mismos datos.\n\n\noptions(knitr.kable.NA = '')\n\nreadxl::read_excel(\"input/tablas.xlsx\", sheet = \"tabla_graficos\") %>% \n  knitr::kable() %>% \n  kable_styling(bootstrap_options = c(\"striped\")) %>% \n  column_spec(1, width_min = \"3cm\", bold = T) %>% \n  column_spec(3, width_min = \"6cm\") %>% \n  pack_rows(\"Layer\", 1, 5)\n\n\nDimensiones\n\n\nSubdimension\n\n\nFunción\n\n\nEjemplo\n\n\nLayer\n\n\n\n\nConjunto de datos\n\n\nLa fuente de información a ser visualizada. Puedem usarse distintas fuentes al construir un gráfico.\n\n\nggplot(data = df_militantes)\n\n\n\n\nEjes (mapping)\n\n\nDefine cómo las variables se aplican en el plot.\n\n\nggplot(df_militantes, mapping = aes(x = “edad”, y = “militantes”)\n\n\n\n\nGeometría (geom)\n\n\nControla el tipo de gráfico que estamos creando.\n\n\ngeom_stat()\n\n\n\n\nTrasformaciones (stat)\n\n\nTransforma los datos, generalmente “resume” la información. Típicamente se usa en los gráficos de barra.\n\n\ngeom_bar(stat = “identity”)\n\n\n\n\nPosiciones (position)\n\n\nA veces, necesitamos ajustar la posición de los elementos de un gráfico. Se usa usualmente en los gráficos de barra.\n\n\ngeom_bar(stat = “identity”, position = “dodge”)\n\n\nEscalas (scale)\n\n\n\n\nControla cómo los datos son representados con atributos estéticos.\n\n\nggplot(df_militantes, mapping = aes(x = “edad”, y = “militantes”, color = “sexo”))\n\n\nSistema de coordenadas (cord)\n\n\n\n\nMapea la posición del objeto (gráfico) en el plano.\n\n\nggplot(…) %>% coord_flip()\n\n\nFaceting (facet)\n\n\n\n\nPuede ser usada para separar los datos en subconjunto de datos.\n\n\nggplot(…) %>% facet_wrap(facets = vars(sexo))\n\n\nAhora, desarrollemos un ejemplo visual:\n1. Primero, crearemos el objeto:\n\n\np <- ggplot(df_militantes, aes(x = militantes, y = edad))\n\n\n2. Agregamos el geom y definir el stat\nLuego, tenemos que definir qué tipo de gráfico queremos. En este caso, haremos un gráfico de barras:\n\n\np + \n  geom_bar(stat = \"identity\") # Contará el número de filas \n\n\n\nHay ciertas cosas que debemos cambiar, por ejemplo:\nCambiar cómo salen representados los rangos etarios.\nCambiar la nomenclatura del eje x.\n3. Escalas\nControla cómo los datos son representados. En este caso, ya tenemos definido cómo están dispuesto los ejes, pero quizás queremos obtener más información. Podemos agregar la variable “sexo” y esto será representado con distintos colores.\n\n\np <- ggplot(df_militantes, aes(x = militantes, y = edad, fill = sexo))\n\n\n\n\np + \n  geom_bar(stat = \"identity\")\n\n\n\n4. Posición\nEsto no es exactamente lo que queremos. Las barras apiladas no son útiles para ver el conteo de los casos.\n\n\np + \n  geom_bar(stat = \"identity\", position = \"dodge\")\n\n\n\nPodemos ver que además cambia la nomenclatura del eje x, ya que disminuimos el número de militantes por rango etario.\n5. Sistema de coordenadas\nEl sistema de coordenadas no suele cambiar cuando trabajamos con este tipo de datos. Aun así, a veces lo usamos para dar “vuelta” la posición de los ejes.\n\n\np + \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  coord_flip()\n\n\n\n6. Faceting\nPuede que no nos guste como está visualizado el gráfico y queremos separar los hombres de las mujeres. Para eso usamos facet.\n\n\np + \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(facets = vars(sexo))\n\n\n\n7. Leyendas, títulos y tema\nComo les iba diciendo, uno puede mejorar los gráficos ocupando títulos, mejorando las categorías de los datos y el tema. Este último, se refiere a todas esas cuestiones “estéticas” del gráfico.\n\n\np + \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(facets = vars(sexo)) +\n  labs(title = \"Número de militantes de partidos políticos por género\", subtitle = \"Año 2016\",\n       x = \"Número de militantes\", y = \"Rangos etarios\", caption = \"Fuente: SERVEL.\") +\n  theme_minimal()\n\n\n\nPara cambiar los rangos etarios, necesitamos cambiar la base de datos con la que estamos trabajando.\n\n\n# Primero, veamos qué tipo de columna es \"edad\":\n\nstr(df_militantes)\n\ntibble [153,020 × 7] (S3: tbl_df/tbl/data.frame)\n $ partido   : chr [1:153020] \"RENOVACION NACIONAL\" \"RENOVACION NACIONAL\" \"RENOVACION NACIONAL\" \"RENOVACION NACIONAL\" ...\n $ region    : chr [1:153020] \"DE TARAPACA\" \"DE TARAPACA\" \"DE TARAPACA\" \"DE TARAPACA\" ...\n $ comuna    : chr [1:153020] \"ALTO HOSPICIO\" \"ALTO HOSPICIO\" \"ALTO HOSPICIO\" \"ALTO HOSPICIO\" ...\n $ sexo      : chr [1:153020] \"M\" \"M\" \"M\" \"M\" ...\n $ total     : num [1:153020] 132 132 132 132 132 132 132 132 132 132 ...\n $ edad      : chr [1:153020] \"x18_19\" \"x20_24\" \"x25_29\" \"x30_34\" ...\n $ militantes: num [1:153020] 0 0 1 0 1 6 13 25 20 25 ...\n\n# Con esto en consideración, hacemos la transformación. Se recomienda crear una nueva variable:\n\ndf_militantes <- df_militantes %>% \n  mutate(rangos_etarios = str_remove(edad, \"x\"))\n\nhead(df_militantes)\n\n# A tibble: 6 × 8\n  partido    region comuna sexo  total edad  militantes rangos_etarios\n  <chr>      <chr>  <chr>  <chr> <dbl> <chr>      <dbl> <chr>         \n1 RENOVACIO… DE TA… ALTO … M       132 x18_…          0 18_19         \n2 RENOVACIO… DE TA… ALTO … M       132 x20_…          0 20_24         \n3 RENOVACIO… DE TA… ALTO … M       132 x25_…          1 25_29         \n4 RENOVACIO… DE TA… ALTO … M       132 x30_…          0 30_34         \n5 RENOVACIO… DE TA… ALTO … M       132 x35_…          1 35_39         \n6 RENOVACIO… DE TA… ALTO … M       132 x40_…          6 40_44         \n\n# Ya eliminamos la x, ahora podemos cambiar el guión bajo por un guión:\n\ndf_militantes <- df_militantes %>% \n  mutate(rangos_etarios = str_remove(edad, \"x\"),\n         rangos_etarios = str_replace(rangos_etarios, \"_\", \"-\"))\n\nhead(df_militantes)\n\n# A tibble: 6 × 8\n  partido    region comuna sexo  total edad  militantes rangos_etarios\n  <chr>      <chr>  <chr>  <chr> <dbl> <chr>      <dbl> <chr>         \n1 RENOVACIO… DE TA… ALTO … M       132 x18_…          0 18-19         \n2 RENOVACIO… DE TA… ALTO … M       132 x20_…          0 20-24         \n3 RENOVACIO… DE TA… ALTO … M       132 x25_…          1 25-29         \n4 RENOVACIO… DE TA… ALTO … M       132 x30_…          0 30-34         \n5 RENOVACIO… DE TA… ALTO … M       132 x35_…          1 35-39         \n6 RENOVACIO… DE TA… ALTO … M       132 x40_…          6 40-44         \n\nVolvemos al gráfico:\n\n\n# Tenemos que crear nuevamente el objeto para que capte las transformaciones que realizamos:\n\np <- ggplot(df_militantes, aes(x = militantes, y = rangos_etarios, fill = sexo))\n\np + \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(facets = vars(sexo)) +\n  labs(title = \"Número de militantes de partidos políticos por género\", subtitle = \"Año 2016\",\n       x = \"Número de militantes\", y = \"Rangos etarios\", caption = \"Fuente: SERVEL.\") +\n  theme_minimal()\n\n\n\nOtra cosa que podemos hacer es eliminar leyenda, ya que no aporta información. También, cambiaremos los títulos de los facets para que digan claramente “Mujeres” y “Varones”.\n\n\np +  \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(facets = vars(sexo)) +\n  labs(title = \"Número de militantes de partidos políticos por género\", subtitle = \"Año 2016\",\n       x = \"Número de militantes\", y = \"Rangos etarios\", caption = \"Fuente: SERVEL.\") +\n  guides(fill = \"none\") + # Tenemos que poner la escala que estamos usando para mostrar la variable sexo\n  theme_minimal()\n\n\n\nCambiamos los títulos de los facets. Dependiendo de nuestros datos, podemos hacerlo directamente en el gráfico o renombrando las variables en la base de datos.\nPrimera opción:\n\n\ndf_militantes_s <- df_militantes %>% \n  mutate(sexo = str_replace_all(sexo, c(\"M\" = \"Mujeres\", \"V\" = \"Varones\")))\n\nm <- ggplot(df_militantes_s, aes(x = militantes, y = rangos_etarios, fill = sexo))\n\nm +  \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(facets = vars(sexo)) +\n  labs(title = \"Número de militantes de partidos políticos por género\", subtitle = \"Año 2016\",\n       x = \"Número de militantes\", y = \"Rangos etarios\", caption = \"Fuente: SERVEL.\") +\n  guides(fill = \"none\") + \n  theme_minimal()\n\n\n\nSegunda opción:\n\n\np +  \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(cols = vars(sexo),\n             labeller = as_labeller(c('M' = \"Mujeres\", 'V' = \"Varones\"))) +\n  labs(title = \"Número de militantes de partidos políticos por género\", subtitle = \"Año 2016\",\n       x = \"Número de militantes\", y = \"Rangos etarios\", caption = \"Fuente: SERVEL.\") +\n  guides(fill = \"none\") + \n  theme_minimal()\n\n\n\nTambién podemos hacer ajustes al tema que estamos usando:\n\n\np +  \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(cols = vars(sexo),\n             labeller = as_labeller(c('M' = \"Mujeres\", 'V' = \"Varones\"))) +\n  labs(title = \"Número de militantes de partidos políticos por género\", subtitle = \"Año 2016\",\n       x = \"Número de militantes\", y = \"Rangos etarios\", caption = \"Fuente: SERVEL.\") +\n  guides(fill = \"none\") + \n  theme_minimal() +\n  theme(text = element_text(family = \"Roboto Condensed\"), # Existe el tema theme_roboto en el paquete hrbrthemes.\n        title = element_text(face = \"bold\")) \n\n\n\nCambiaremos los colores:\n\n\np +  \n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_fill_manual(values = c(\"#d90429\",\"#2b2d42\")) +\n  facet_grid(cols = vars(sexo),\n             labeller = as_labeller(c('M' = \"Mujeres\", 'V' = \"Varones\"))) +\n  labs(title = \"Número de militantes de partidos políticos por género\", subtitle = \"Año 2016\",\n       x = \"Número de militantes\", y = \"Rangos etarios\", caption = \"Fuente: SERVEL.\") +\n  guides(fill = \"none\") + \n  theme_minimal() +\n  theme(text = element_text(family = \"Roboto Condensed\"), # Existe el tema theme_roboto en el paquete hrbrthemes.\n        plot.title = element_text(face = \"bold\"),\n        strip.text = element_text(colour = \"#ef233c\", face = \"bold\"),\n        strip.background = element_rect(fill = \"#edf2f4\", colour = F)) \n\n\n\nPodemos hacer nuestro tema, que será utilizado en el resto de los gráficos.\n¿Qué graficaremos ahora?\nAquellos gráficos que nos permitirán observar la información de variables continuas.\nFuentes:\nR Markdown Website.\nCreate awesome html table with knitr::kable and kableExtra.\nExplore your dataset in R.\nGrammar of graphics.\nPaletas de colores.\nEspecificaciones de temas.\n\n\n\n",
    "preview": "posts/2022-08-17-primeros-pasos/primeros-pasos_files/figure-html5/unnamed-chunk-9-1.png",
    "last_modified": "2022-08-17T17:47:13-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
